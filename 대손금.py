# -*- coding: utf-8 -*-
#Created on 2018-12-24 @author: 권달현
import 법인세법,법인세법시행령,법인세법시행규칙
import 부가가치세법,부가가치세법시행령,부가가치세법시행규칙
import 소득세법,소득세법시행령
기업회계={
    "대손금의 확정":{},
    "대손금의 회수":{},
    "채권채무의 조정(이자율의 인하 또는 만기연장의 방법에 의한 조건변경):일반회계기준 6장":{},
}
법인세={
    "요지":{
        "법인세법.제19조의2(대손금의 손금불산입) 제1항": 법인세법.제19_02조,
    },
    "대손금으로 인정되는 채권": {
        "법인세법시행령.제19조의2(대손금의 손금불산입) 제1항": 법인세법시행령.제19_02조,
    },
    "대손금으로 인정되지 않는 채권": {
        "대손세액공제를 받은 금액:참고-->법인세법시행령.제19조(손비의 범위) 제8호": 법인세법시행령.제19조,
        "법인세법.제19조의2(대손금의 손금불산입) 제2항": 법인세법.제19_02조,
        "법인세법.제28조(지급이자의 손금불산입) 제1항제4호나목": 법인세법.제28조,
        "특수관계인 소득세대납액 가지급금 계상액 : 법기통 19의2-19의2...4": {},
        "약정에 의한 채권포기금액 :법기통 19의2-19의2...5": {},
    },
    "대손금의 귀속시기":{
        "법인세법시행령.제19조의2(대손금의 손금불산입) 제3,4항": 법인세법시행령.제19_02조,
        "신고조정가능채권":{
            "장부상에 손금산입하지 않아도 사유발생 사업연도에 세무조정으로 손금산입 가능":{},
            "법인세법시행령.제19조의2(대손금의 손금불산입) 제1항 제1~7호": 법인세법시행령.제19_02조,
            "귀속사업연도: 해당 사유발생하여 법인이 손금으로 계상한 날":{},
            "소멸시효완성채권 : 법인세법시행령.제19조의2(대손금의 손금불산입) 제1항 제1~4호":{},
            "법정소멸채권 : 법인세법시행령.제19조의2(대손금의 손금불산입) 제1항 제5~7호":{},
        },
        "결산조정채권":{
            "장부상에 손금에 계상한 경우에 한하여 손금으로 할 수 있다.":{},
            "부도어음은 부도발생 6개월 경과후부터 소멸시효완성까지 손금산입 가능하나 소멸시효완성 경과이후에는 손금산입 불가능하다.":{},
            "법인세법시행령.제19조의2(대손금의 손금불산입) 제1항 제8호~": 법인세법시행령.제19_02조,
            "합병/분할하는 경우의 기타의 대손채권 손금산입 법인세법시행령.제19조의2(대손금의 손금불산입) 제4항": 법인세법시행령.제19_02조,
            "귀속사업연도: 해당 사유발생일": {},
        },
    },
    "대손금으로 확정하기 위한 구비서류":{
        "은행의 부도확인서":{},
        "채권관리부서의 조사보고서":{},
    },
    "대손금의 세무조정":{
        "대손요건 불비채권의 대손처리시": {},
        "사후관리": {
            "대손사유 미충족으로 대손부인된 채권: 대손사유충족시 손금산입(-유보)": {},
            "신고조정 대손금의 대손금 회계처리: 손금불산입/유보": {},
        },
        "정당한 사유없이 채권포기금액을 대손금으로 회계처리한 경우":{
            "접대비 처리 성격":{},
            "비지정기부금 성격": {},
            "부당행위계산부인 성격": {},
            "직원횡령금의 경우 대손처리가능한 경우 : 법기통 19의2-19의2...6": {},
        },
        "신고조정대상대손금에 해당하지 않는 회수불능채권을 신고조정으로 손금산입한 경우 : 수정신고 대상":{},
    },
    "채권채무의 조정(이자율의 인하 또는 만기연장의 방법에 의한 조건변경)":{
        "법인세법시행령.제19조의2(대손금의 손금불산입) 제5항": 법인세법시행령.제19_02조,
        "정당한 사유가 없는 경우에는 접대비/기부금 간주: 법기통 19의2-19의2...5,8":{},
        "채무법인의 채무조정이익 익금불산입 :법기통 19의2-19의2...9":{},
    },
    "부가가치세 대손세액 공제제도":{
        "부가가치세법 제45조(대손세액의 공제특례)":부가가치세법.제45조,
        "법인세법시행령.제19조(손비의 범위) 제8호": 법인세법시행령.제19조,
        "대손사유":{
            "법인세법시행령.제19조의2(대손금의 손금불산입) 제1항 ": 법인세법시행령.제19_02조,
            "소득세법시행령.제55조(사업소득의 필요경비의 계산) 제2항 ": 소득세법시행령.제55조,
            "부가가치세법시행령.제87조(대손세액 공제의 범위) 제2항 ": 부가가치세법시행령.제87조,
        },
        "대손세액 공제범위":{
            "부가가치세법시행령.제87조(대손세액 공제의 범위) 제2항 ": 부가가치세법시행령.제87조,
        },
        "대손세액의 계산방법":{},
        "대손세액의 처리":{},
        "대손세액공제의 신청":{
            "부가가치세법시행령.제87조(대손세액 공제의 범위) 제4항 ": 부가가치세법시행령.제87조,
            "부가가치세법시행규칙.제60조(대손세액 공제 및 변제 신고서) ": 부가가치세법시행규칙.제60조,
        },
    },
    "대손금의 회수":{},
}
#___________________________________________________
제목='대손금'
_={
    #"지방소득세_법인세분 가산세": 지방소득세_법인세분,
    "기업회계":기업회계,
    "법인세":법인세,
    #"조세특례제한법":조세특례제한법,
    #"증여세":증여세,
    #"상속세":상속세,
    #"양도소득세":양도소득세,
    #"농어촌특별세":{},
}
tax=_
import wx
class MyFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self,parent=None,title=제목)
        self.SetSize(420,320*2)
        self.mainPanel=wx.Panel(self)
        self.expandButton=wx.Button(self.mainPanel,label='펼침')
        self.tree=wx.TreeCtrl(self.mainPanel)
        root=self.tree.AddRoot(제목)
        for i in tax:
            ii=self.tree.AppendItem(root,i)
            for j in tax[i]:
                jj=self.tree.AppendItem(ii,j)
                for k in tax[i][j]:
                    kk=self.tree.AppendItem(jj,k)
                    for m in tax[i][j][k]:
                        mm=self.tree.AppendItem(kk,m)
                        for n in tax[i][j][k][m]:
                            nn=self.tree.AppendItem(mm,n)
                            for p in tax[i][j][k][m][n]:
                                pp=self.tree.AppendItem(nn,p)
                                for q in tax[i][j][k][m][n][p]:
                                    qq=self.tree.AppendItem(pp,q)
                                    for r in tax[i][j][k][m][n][p][q]:
                                        rr=self.tree.AppendItem(qq,r)
        self.staticText =wx.TextCtrl(self.mainPanel,style=wx.TE_MULTILINE)

        self.vtBoxSizer=wx.BoxSizer(wx.VERTICAL)
        self.vtBoxSizer.Add(self.expandButton,0,wx.EXPAND|wx.ALL,5)
        self.vtBoxSizer.Add(self.tree        ,5,wx.EXPAND|wx.ALL,5)
        self.vtBoxSizer.Add(self.staticText  ,0,wx.EXPAND|wx.ALL,5)
        self.mainPanel.SetSizer(self.vtBoxSizer)
        self.Bind(wx.EVT_BUTTON          ,self.OnExpandButton,self.expandButton)
        self.Bind(wx.EVT_TREE_SEL_CHANGED,self.OnNodeSelected,self.tree)
    def OnExpandButton(self,e):
        self.tree.ExpandAll()
    def OnNodeSelected(self,e):
        selected=self.tree.GetSelection()
        self.staticText.SetLabel(self.tree.GetItemText(selected))
        #self.
        self.mainPanel.Layout()
if __name__=='__main__':
    app=wx.App()
    frame=MyFrame()
    frame.Show()
    app.MainLoop()
#___________________________________________________